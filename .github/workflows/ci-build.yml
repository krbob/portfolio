name: CI Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Test containers
        run: |
          echo "üõ†Ô∏è Building and running containers locally for testing"
          docker compose -f docker-compose-build.yml up -d
          
          echo "‚è≥ Waiting for containers to start..."
          sleep 15
          
          echo "üì¶ Checking container status:"
          docker ps -a
          
          for container in $(docker compose -f docker-compose-build.yml ps -q); do
            status=$(docker inspect --format='{{.State.ExitCode}}' $container)
            if [ "$status" != "0" ]; then
              echo "‚ùå Container $container exited with code $status"
              docker logs $container
              exit 1
            fi
          done
          
          echo "üîç Sending test requests..."
          if ! curl --fail -X GET http://localhost:7777/analysis/aapl; then
            echo "‚ùå analysis endpoint did not respond properly"
            exit 1
          fi
          
          if ! curl --fail -X GET "http://localhost:7777/analysis/aapl?conversion=eur=x"; then
            echo "‚ùå analysis with conversion endpoint did not respond properly"
            exit 1
          fi
      - name: Clean up test containers
        if: always()
        run: docker compose -f docker-compose-build.yml down

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image for backend
        id: push-backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max